// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id          String       @id @default(uuid())
  name        String
  description String?
  price       Float
  imageUrl    String?
  available   Boolean      @default(true)
  categoryId  String
  category    Category     @relation(fields: [categoryId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  orderItems  OrderItem[]
}

model Order {
  id         String      @id @default(uuid())
  status     OrderStatus @default(PENDING)
  userId     String
  user       User        @relation(fields: [userId], references: [id])
  total      Float
  items      OrderItem[]
  paymentId  String?
  payment    Payment?    @relation(fields: [paymentId], references: [id])
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id        String       @id @default(uuid())
  amount    Float
  status    PaymentStatus @default(PENDING)
  method    PaymentMethod
  orders    Order[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

enum Role {
  ADMIN
  MERCHANT
  CUSTOMER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  CASH
  MOBILE_PAYMENT
}